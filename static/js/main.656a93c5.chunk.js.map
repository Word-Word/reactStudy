{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","current","length","console","log","calculateWinner","setState","concat","step","status","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.656a93c5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        history: [ \n          {\n            squares: Array(9).fill(null)\n          }\n        ],\n        stepNumber: 0,\n        xIsNext: true,\n      };\n    }\n\n    handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n\n      console.log(\"history: \", history);\n      console.log(\"current: \", current);\n      console.log(\"squares: \", squares);      \n      console.log(\"history.length: \", history.length);\n      console.log(\"---------------------------------------\");\n      \n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n      this.setState({\n        history: history.concat([{ squares }]),\n        xIsNext: !this.state.xIsNext,\n        stepNumber: history.length,\n      });\n    }\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,  \n      })\n    }\n\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n\n\n      const moves = history.map((step, move) => {\n        const desc = move ?\n          move + \"번째 턴\" :\n          '시작지점';\n\n        return (\n          <li key = {move}>\n            <button onClick={() => this.jumpTo(move)}> {desc} </button>\n          </li>\n        );\n      });\n\n\n      let status;\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              squares={ current.squares }\n              onClick={ (i) => this.handleClick(i) }\n            />\n          </div>\n          <div className=\"game-info\">\n            <div> {status} </div>\n            <ol>  {moves}  </ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],  // 가로 1줄\n      [3, 4, 5],  // 가로 2줄\n      [6, 7, 8],  // 가로 3줄\n      [0, 3, 6],  // 세로 1줄\n      [1, 4, 7],  // 세로 2줄\n      [2, 5, 8],  // 세로 3줄\n      [0, 4, 8],  // 왼쪽 대각선 1줄\n      [2, 4, 6],  // 우측 대각선 1줄\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      \n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];  // O 혹은 X를 반환\n      }\n    }\n\n    return null;\n  }\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}